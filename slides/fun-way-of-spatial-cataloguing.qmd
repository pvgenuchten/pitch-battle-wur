---
title: A fun way to do spatial cataloguing 
subtitle: Data discovery using pygeometa and mdme
author: Paul van Genuchten, Tom Kralidis
date: 2024-07-03
format:
  revealjs:
    incremental: true
    theme: sky
    logo: ./img/logo-foss4g-tartu.png
    footer: "FOSS4G Europe 2024, Tartu, Estonia"
---

# A fun way to do spatial cataloguing

- Using GitHub as a content management platform
  - we all know the "Edit this page" GitHub link in modern websites/wikis
  - anybody can contribute, contributions are traceable, easily restore / rollback if things break
  - we want that experience for spatial cataloguing

# Intro to pygeometa and MCFs

- [pygeometa](https://geopython.github.io/pygeometa) is a Python package to generate metadata for geospatial datasets 
- A [metadata control file (MCF)](https://geopython.github.io/pygeometa/reference/mcf) is a format endorsed by the geopython community, defined and maintained as part of the pygeometa library
  - YAML encoded subset of ISO 19115
  - Supports YAML features such as references and includes

# From sidecar YAML files to publications in a catalogue

- MCF is converted to ISO 19115 using pygeometa and then loaded into a catalogue
- [pycsw](https://pycsw.org) a standards based catalogue component (PostgreSQL backend)
- Supports OGC API - Records, various metadata models, faceted search 

## Metadata publication workflow
```{mermaid}
flowchart TB
    P[Project folder] -->|Files| CI{{crawler}}
    CI -->|Extract metadata| P
    CI --> G[Git] 
    G --> pycsw
```

# How is MCF perceived by less tech oriented users?

- Typical users expect shiny webforms, like LinkedIn, Facebook
- Not used to YAML syntax and Git CI-CD workflows
- Enter [mdme](https://github.com/osgeo/mdme), the Model Driven Metadata Editor / web application for geospatial metadata editing

# How is MCF perceived by tech oriented users?

- YAML is an optimal format for Git version control (fixed indents)
- Git offers a fully traceable catalogue (who did what when)
- File-based metadata is easy to update with "search and replace" workflow
- YAML can be composed and published in memory for automated pipelines

# Automated metadata publication use cases

We present 2 use cases to demonstrate the value of this approach:

- Land Soil Crop Hubs
- WMO Information System (WIS2)

# Land Soil Crop hubs

- An EU funded project to improve data sharing in the Land Soil Crop domain in East Africa
- Collect resources which are relevant to agriculture in East Africa

## Participatory metadata management

- Users initially provided metadata as lists in Microsoft Excel
- Metadata is hosted in GitHub
- Users contribute content (or register issues about content)

## Metadata as a source for MapServer configuration

- Use the metadata to generate [MapServer](https://mapserver.org) mapfile configuration 
- Add the generated map endpoint to the metadata
- MapServer is fully aligned with the catalogue

## TerriaJS, a web-based GIS

- The project uses [TerriaJS](https://terria.io) as a data viewer (React + Leaflet/Cesium)
- TerriaJS includes a Catalogue search as CSW and links back to the catalogue via wms capabilities
- Extra integration via 'Add data to viewer' from catalogue page

# WMO Information System (WIS2)

- [WMO WIS2](https://community.wmo.int/en/activity-areas/wis/wis2-implementation) is a next generation data exchange system for Earth system data (weather/climate/water)
- Event driven (Pub/Sub, MQTT), driven by OGC API - Records metadata and publication
- Set of tools adopted by regional weather offices to build up a global system

## Workflow

"No code": Manage, verify and publish metadata using GitHub as a content management platform.

- Metadata files are managed as pygeometa MCF records
- GitHub Actions are used to verify, transform and publish notification messages to an MQTT broker
- From here, a metadata registrar is subscribed to the same MQTT broker and, on notification, verifies new/updated metadata and publishes to an OGC API - Records endpoint (powered by [pygeoapi](https://pygeoapi.io)) using OGC API - Features - Part 4. The QGIS desktop application is then used to query the OGC API - Records endpoint using its MetaSearch search client.

## Workflow

![](./img/wis2-metadata-github-pubsub-workflow.png){.fragment width="600" }

# Take aways

- MCF is an interesting and useful metadata format for embedded metadata in local file repositories
- Git storage and CI-CD workflows are a traceable, reproducible and participatory approach for metadata management
- OGC API - Records (in for example pycsw) offers a clean machine and human friendly interface to metadata

# Demo time

...
